/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, {useState ,useRef } from "react";
import { useFrame } from "@react-three/fiber";
import { useControls } from "leva";
import * as THREE from 'three'

import { MeshTransmissionMaterial, useGLTF } from "@react-three/drei";
import HolographicMaterial from "./HolographicMaterial";

export function Face(props) {
  const { nodes, materials } = useGLTF("/faceDeriq.glb");
  const [clicked, setClicked] = useState(false)
    const ref = useRef()
    const vec = new THREE.Vector3()
    const clock = new THREE.Clock

    const holographicControls = useControls({
      fresnelAmount: { value: 1.00, min: 0.0, max: 1.0 },
      fresnelOpacity: { value: 0.67, min: 0.0, max: 1.0 },
      scanlineSize: { value: 0.1, min: 0.1, max: 20 },
      hologramBrightness: { value: 1.3, min: 0.0, max: 2 },
      signalSpeed: { value: 0.39, min: 0.0, max: 2 },
      hologramColor: { value: "#51a4de" },
      enableBlinking: false,
      blinkFresnelOnly: true,
      enableAdditive: false,
      side: { options: ["FrontSide", "BackSide", "DoubleSide"] },
    });
   
    useFrame(state =>{
       const elapsedTime = clock.getElapsedTime()

        if(clicked){
        state.camera.lookAt(ref.current.position)
             //state.camera.position.lerp(vec.set(10, 0, 10), 0.01)
          
            state.camera.position.x =  Math.sin(elapsedTime) * 0.5
           // state.camera.position.y = Math.sin(elapsedTime) * 0.5
            state.camera.updateProjectionMatrix()
        }
        return null
    })
  return (
    <group {...props} dispose={null}>
      <mesh
      ref={ref}
      onClick={() => setClicked(!clicked)}
        castShadow
        receiveShadow
        geometry={nodes.FaceBuilderHead.geometry}
       
      >
      <HolographicMaterial {...holographicControls}  />
        {/* <MeshTransmissionMaterial 
            thickness={1}
        /> */}
      </mesh>
    </group>
  );
}

useGLTF.preload("/faceDeriq.glb");
